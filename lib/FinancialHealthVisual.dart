import 'package:pixi/pixi.dart';
import 'package:YearInReview/TimelineVisual.dart';
import 'package:YearInReview/LayoutConstants.dart';
import 'dart:html';
import 'dart:math';

class Position {
  DateTime _date;
  double _value;

  Position (DateTime date, double value) {
    _date = date;
    _value = value;
  }

  DateTime get Date => _date;
  double get Value => _value;
}

class FinancialHealthVisual {
  static final num height = 16;

  static final List<Position> positions = [
    new Position(DateTime.parse("2016-01-11"), 0.005263),
    new Position(DateTime.parse("2016-01-12"), 0.004922),
    new Position(DateTime.parse("2016-01-13"), 0.004332),
    new Position(DateTime.parse("2016-01-14"), 0.004170),
    new Position(DateTime.parse("2016-01-15"), 0.003874),
    new Position(DateTime.parse("2016-01-18"), 0.002610),
    new Position(DateTime.parse("2016-01-19"), 0.002551),
    new Position(DateTime.parse("2016-01-20"), 0.002462),
    new Position(DateTime.parse("2016-01-21"), 0.001092),
    new Position(DateTime.parse("2016-01-25"), 0.000222),
    new Position(DateTime.parse("2016-01-27"), 0.000000),
    new Position(DateTime.parse("2016-01-28"), 0.000492),
    new Position(DateTime.parse("2016-01-29"), 0.036791),
    new Position(DateTime.parse("2016-02-01"), 0.035193),
    new Position(DateTime.parse("2016-02-02"), 0.029289),
    new Position(DateTime.parse("2016-02-03"), 0.028876),
    new Position(DateTime.parse("2016-02-05"), 0.025616),
    new Position(DateTime.parse("2016-02-08"), 0.025071),
    new Position(DateTime.parse("2016-02-16"), 0.024579),
    new Position(DateTime.parse("2016-02-17"), 0.023330),
    new Position(DateTime.parse("2016-02-19"), 0.023242),
    new Position(DateTime.parse("2016-02-22"), 0.507425),
    new Position(DateTime.parse("2016-02-23"), 0.507334),
    new Position(DateTime.parse("2016-02-24"), 0.835908),
    new Position(DateTime.parse("2016-02-25"), 0.835862),
    new Position(DateTime.parse("2016-02-26"), 0.835247),
    new Position(DateTime.parse("2016-02-29"), 0.829126),
    new Position(DateTime.parse("2016-03-01"), 0.829361),
    new Position(DateTime.parse("2016-03-02"), 0.823359),
    new Position(DateTime.parse("2016-03-04"), 0.823072),
    new Position(DateTime.parse("2016-03-07"), 0.822301),
    new Position(DateTime.parse("2016-03-08"), 0.822029),
    new Position(DateTime.parse("2016-03-09"), 0.816662),
    new Position(DateTime.parse("2016-03-16"), 0.810450),
    new Position(DateTime.parse("2016-03-17"), 0.696884),
    new Position(DateTime.parse("2016-03-18"), 0.696727),
    new Position(DateTime.parse("2016-03-21"), 0.696245),
    new Position(DateTime.parse("2016-03-23"), 0.696155),
    new Position(DateTime.parse("2016-03-24"), 0.695832),
    new Position(DateTime.parse("2016-03-29"), 0.694291),
    new Position(DateTime.parse("2016-04-01"), 0.694855),
    new Position(DateTime.parse("2016-04-04"), 0.688951),
    new Position(DateTime.parse("2016-04-05"), 0.688819),
    new Position(DateTime.parse("2016-04-06"), 0.686259),
    new Position(DateTime.parse("2016-04-07"), 0.689044),
    new Position(DateTime.parse("2016-04-08"), 0.688925),
    new Position(DateTime.parse("2016-04-11"), 0.687988),
    new Position(DateTime.parse("2016-04-13"), 0.687692),
    new Position(DateTime.parse("2016-04-14"), 0.685026),
    new Position(DateTime.parse("2016-04-18"), 0.684879),
    new Position(DateTime.parse("2016-04-19"), 0.684623),
    new Position(DateTime.parse("2016-04-20"), 0.684534),
    new Position(DateTime.parse("2016-04-21"), 0.682130),
    new Position(DateTime.parse("2016-04-25"), 0.681244),
    new Position(DateTime.parse("2016-04-27"), 0.681017),
    new Position(DateTime.parse("2016-04-28"), 0.680906),
    new Position(DateTime.parse("2016-04-29"), 0.680117),
    new Position(DateTime.parse("2016-05-03"), 0.668246),
    new Position(DateTime.parse("2016-05-04"), 0.667941),
    new Position(DateTime.parse("2016-05-05"), 0.664305),
    new Position(DateTime.parse("2016-05-06"), 0.663163),
    new Position(DateTime.parse("2016-05-09"), 0.662084),
    new Position(DateTime.parse("2016-05-10"), 0.661138),
    new Position(DateTime.parse("2016-05-11"), 0.660257),
    new Position(DateTime.parse("2016-05-12"), 0.659398),
    new Position(DateTime.parse("2016-05-13"), 0.658906),
    new Position(DateTime.parse("2016-05-16"), 0.658181),
    new Position(DateTime.parse("2016-05-18"), 0.653045),
    new Position(DateTime.parse("2016-05-19"), 0.654575),
    new Position(DateTime.parse("2016-05-20"), 0.653525),
    new Position(DateTime.parse("2016-05-23"), 0.653260),
    new Position(DateTime.parse("2016-05-25"), 0.653214),
    new Position(DateTime.parse("2016-05-27"), 0.652919),
    new Position(DateTime.parse("2016-06-01"), 0.653234),
    new Position(DateTime.parse("2016-06-02"), 0.647094),
    new Position(DateTime.parse("2016-06-06"), 0.601438),
    new Position(DateTime.parse("2016-06-08"), 0.601318),
    new Position(DateTime.parse("2016-06-09"), 0.601188),
    new Position(DateTime.parse("2016-06-13"), 0.600925),
    new Position(DateTime.parse("2016-06-14"), 0.599449),
    new Position(DateTime.parse("2016-06-17"), 0.599291),
    new Position(DateTime.parse("2016-06-21"), 0.599203),
    new Position(DateTime.parse("2016-06-22"), 0.599112),
    new Position(DateTime.parse("2016-06-27"), 0.598689),
    new Position(DateTime.parse("2016-07-01"), 0.599004),
    new Position(DateTime.parse("2016-07-04"), 0.592952),
    new Position(DateTime.parse("2016-07-08"), 0.592833),
    new Position(DateTime.parse("2016-07-11"), 0.592548),
    new Position(DateTime.parse("2016-07-13"), 0.592322),
    new Position(DateTime.parse("2016-07-18"), 0.591820),
    new Position(DateTime.parse("2016-07-19"), 0.591357),
    new Position(DateTime.parse("2016-07-20"), 0.591150),
    new Position(DateTime.parse("2016-07-21"), 0.590562),
    new Position(DateTime.parse("2016-07-22"), 0.589981),
    new Position(DateTime.parse("2016-07-25"), 0.588280),
    new Position(DateTime.parse("2016-07-26"), 0.587984),
    new Position(DateTime.parse("2016-07-27"), 0.587456),
    new Position(DateTime.parse("2016-07-28"), 0.587254),
    new Position(DateTime.parse("2016-07-29"), 0.586980),
    new Position(DateTime.parse("2016-08-01"), 0.586755),
    new Position(DateTime.parse("2016-08-02"), 0.580851),
    new Position(DateTime.parse("2016-08-03"), 0.580566),
    new Position(DateTime.parse("2016-08-04"), 0.580316),
    new Position(DateTime.parse("2016-08-05"), 0.580033),
    new Position(DateTime.parse("2016-08-08"), 0.577902),
    new Position(DateTime.parse("2016-08-09"), 0.577607),
    new Position(DateTime.parse("2016-08-10"), 0.574302),
    new Position(DateTime.parse("2016-08-12"), 0.574076),
    new Position(DateTime.parse("2016-08-15"), 0.573955),
    new Position(DateTime.parse("2016-08-16"), 0.570417),
    new Position(DateTime.parse("2016-08-17"), 1.000000),
    new Position(DateTime.parse("2016-08-18"), 0.999655),
    new Position(DateTime.parse("2016-08-19"), 0.999566),
    new Position(DateTime.parse("2016-08-23"), 0.999469),
    new Position(DateTime.parse("2016-08-24"), 0.996517),
    new Position(DateTime.parse("2016-08-25"), 0.996471),
    new Position(DateTime.parse("2016-08-26"), 0.996422),
    new Position(DateTime.parse("2016-08-30"), 0.999746),
    new Position(DateTime.parse("2016-08-31"), 0.996166),
    new Position(DateTime.parse("2016-09-01"), 0.996254),
    new Position(DateTime.parse("2016-09-02"), 0.985982),
    new Position(DateTime.parse("2016-09-05"), 0.983736),
    new Position(DateTime.parse("2016-09-07"), 0.982752),
    new Position(DateTime.parse("2016-09-08"), 0.981672),
    new Position(DateTime.parse("2016-09-09"), 0.981009),
    new Position(DateTime.parse("2016-09-12"), 0.980640),
    new Position(DateTime.parse("2016-09-14"), 0.980443),
    new Position(DateTime.parse("2016-09-16"), 0.979014),
    new Position(DateTime.parse("2016-09-19"), 0.975546),
    new Position(DateTime.parse("2016-09-20"), 0.975026),
    new Position(DateTime.parse("2016-09-21"), 0.974840),
    new Position(DateTime.parse("2016-09-22"), 0.972532),
    new Position(DateTime.parse("2016-09-26"), 0.972231),
    new Position(DateTime.parse("2016-09-27"), 0.971585),
    new Position(DateTime.parse("2016-09-29"), 0.971261),
    new Position(DateTime.parse("2016-09-30"), 0.967789),
    new Position(DateTime.parse("2016-10-03"), 0.962031),
    new Position(DateTime.parse("2016-10-04"), 0.961569),
    new Position(DateTime.parse("2016-10-05"), 0.961214),
    new Position(DateTime.parse("2016-10-06"), 0.961214),
    new Position(DateTime.parse("2016-10-07"), 0.961057),
    new Position(DateTime.parse("2016-10-10"), 0.961035),
    new Position(DateTime.parse("2016-10-11"), 0.960188),
    new Position(DateTime.parse("2016-10-13"), 0.959962),
    new Position(DateTime.parse("2016-10-17"), 0.959314),
    new Position(DateTime.parse("2016-10-18"), 0.959157),
    new Position(DateTime.parse("2016-10-19"), 0.959068),
    new Position(DateTime.parse("2016-10-20"), 0.957666),
    new Position(DateTime.parse("2016-10-21"), 0.947806),
    new Position(DateTime.parse("2016-10-24"), 0.947625),
    new Position(DateTime.parse("2016-10-25"), 0.946740),
    new Position(DateTime.parse("2016-10-26"), 0.946204),
    new Position(DateTime.parse("2016-10-27"), 0.945978),
    new Position(DateTime.parse("2016-10-28"), 0.945021),
    new Position(DateTime.parse("2016-10-31"), 0.944962),
    new Position(DateTime.parse("2016-11-01"), 0.945315),
    new Position(DateTime.parse("2016-11-02"), 0.939263),
    new Position(DateTime.parse("2016-11-03"), 0.936252),
    new Position(DateTime.parse("2016-11-04"), 0.935877),
    new Position(DateTime.parse("2016-11-07"), 0.935753),
    new Position(DateTime.parse("2016-11-08"), 0.935584),
    new Position(DateTime.parse("2016-11-09"), 0.935299),
    new Position(DateTime.parse("2016-11-11"), 0.935004),
    new Position(DateTime.parse("2016-11-14"), 0.934211),
    new Position(DateTime.parse("2016-11-15"), 0.933802),
    new Position(DateTime.parse("2016-11-16"), 0.933505),
    new Position(DateTime.parse("2016-11-17"), 0.933347),
    new Position(DateTime.parse("2016-11-22"), 0.954723),
    new Position(DateTime.parse("2016-11-23"), 0.954428),
    new Position(DateTime.parse("2016-11-24"), 0.953921),
    new Position(DateTime.parse("2016-11-28"), 0.953250),
    new Position(DateTime.parse("2016-11-29"), 0.945299),
    new Position(DateTime.parse("2016-12-01"), 0.942250),
    new Position(DateTime.parse("2016-12-02"), 0.936015),
    new Position(DateTime.parse("2016-12-05"), 0.935692),
    new Position(DateTime.parse("2016-12-07"), 0.934936),
    new Position(DateTime.parse("2016-12-08"), 0.934817),
    new Position(DateTime.parse("2016-12-09"), 0.940400),
    new Position(DateTime.parse("2016-12-12"), 0.940254),
    new Position(DateTime.parse("2016-12-13"), 0.940028),
    new Position(DateTime.parse("2016-12-16"), 0.939799),
    new Position(DateTime.parse("2016-12-19"), 0.939236),
    new Position(DateTime.parse("2016-12-20"), 0.939531),
    new Position(DateTime.parse("2016-12-21"), 0.939085),
    new Position(DateTime.parse("2016-12-22"), 0.963347),
    new Position(DateTime.parse("2016-12-23"), 0.963161),
    new Position(DateTime.parse("2016-12-28"), 0.963276),
    new Position(DateTime.parse("2016-12-29"), 0.962589),
    new Position(DateTime.parse("2017-01-03"), 0.948273),
    new Position(DateTime.parse("2017-01-04"), 0.948126),
    new Position(DateTime.parse("2017-01-06"), 0.947905),
    new Position(DateTime.parse("2017-01-09"), 0.946597),
    new Position(DateTime.parse("2017-01-10"), 0.946597),
    new Position(DateTime.parse("2017-01-11"), 0.946597),
    new Position(DateTime.parse("2017-01-12"), 0.946597),
    new Position(DateTime.parse("2017-01-13"), 0.946597),
    new Position(DateTime.parse("2017-01-15"), 0.946597),
  ];

  TimelineVisual Initialize(DateTime startDate, num days) {  
    TimelineVisual timelineVisual = new TimelineVisual("Finances", (days * LayoutConstants.DayWidth), height + 4);

    Graphics graphics = new Graphics();
    graphics.position = new Point(LayoutConstants.HorizontalMargin, 0);
    graphics.lineStyle(2, new Colour.fromHtml("#8cc665"), 1.0);

    DateTime maxDate = startDate.add(new Duration(days: days + 1));

    num y = height - (height * positions.first.Value);

    graphics.moveTo(0, y);

    positions
        .where((p) => p.Date.isAfter(startDate) && p.Date.isBefore(maxDate))
        .forEach((p) => graphics.lineTo(p.Date.difference(startDate).inDays * LayoutConstants.DayWidth, height - (height * p.Value)));

    timelineVisual.children.add(graphics);

    return timelineVisual;
  }
}